import numpy as np

# Define the function and its derivative
def f(x):
    return (x * np.sin(x) - 1) / 2

def df(x):
    return (np.sin(x) + x * np.cos(x)) / 2

# Gradient Descent Parameters
x = -7
alpha = 0.25
iterations = 4

# Perform gradient descent
for i in range(iterations):
    grad = df(x)
    x = x - alpha * grad
    fx = f(x)
    print(f"Iteration {i+1}: x = {x:.6f}, f(x) = {fx:.6f}")
# import numpy as np

# # Function definition
# def f(x1, x2):
#     return x1**2 - x1 * x2 + 2 * x2**2

# # Gradient of f
# def grad_f(x1, x2):
#     df_dx1 = 2 * x1 - x2
#     df_dx2 = -1 * x1 + 4 * x2
#     return np.array([df_dx1, df_dx2])

# # Initial values
# x = np.array([3.0, 2.0])

# # Perform 2 iterations
# for t in range(1, 3):  # t = 1 and 2
#     eta = 0.5
#     grad = grad_f(x[0], x[1])
#     x = x - eta * grad
#     fx = f(x[0], x[1])
#     print(f"Iteration {t}: x = {x}, f(x1,x2) = {fx}")

